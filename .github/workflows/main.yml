name: CI
env:
  prodURL: "https://grocock.email"
  devURL: "https://dev.grocock.email"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-dev:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host server
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ env.devURL }}
        
      - name: Clone Dev changes
        run: ssh server 'cd /root/website/website_dev; git checkout master; git pull'
      - name: Shutdown Dev
        run: ssh server 'cd /root/website/website_dev; docker-compose -f "./docker-compose.dev.yml" down'
      - name: Build Dev changes
        run: ssh server 'cd /root/website/website_dev; docker-compose -f "./docker-compose.dev.yml" up -d'
      
      - name: Sleep for 1 minute
        uses: jakejarvis/wait-action@master
        with:
          time: '60s'
          
  test-dev:
    needs: [build-dev]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:      
      - name: Check http status code of Development site
        uses: lakuapik/gh-actions-http-status@v1
        with:
          sites: '["${{ env.devURL }}"]'
          expected: '[200]'
      
  analyze:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
    
  hadolint:
    name: Docker - Lint
    runs-on: ubuntu-latest
    needs: [analyze]
    
    strategy:
      matrix:
        project: [ 'assets', 'backend', 'frontend' ]
    
    steps:
    - uses: actions/checkout@master
    - name: hadolint on pr
      uses: burdzwastaken/hadolint-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        HADOLINT_ACTION_DOCKERFILE_FOLDER: ./${{ matrix.project }}
 
  eslint:
    name: NodeJS - eslint 
    runs-on: ubuntu-latest
    needs: [hadolint]
    
    strategy:
      matrix:
        project: [ 'assets', 'backend', 'frontend' ]
    
    steps:
      - uses: actions/checkout@v1
      - name: eslint
        uses: reviewdog/action-eslint@v1
        with:
          reporter: github-pr-review # Change reporter.
          eslint_flags: '${{ matrix.project }}/src/'
      
  build-prod:
    needs: [test-dev, analyze, eslint]
    if: github.actor == github.event.repository.owner.login
        
    runs-on: ubuntu-latest
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host server
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ env.prodURL }}
          
      - name: Clone Prod changes
        run: ssh server 'cd /root/website/website_prod; git checkout master; git pull'
        
      - name: Shutdown Prod
        run: ssh server 'cd /root/website/website_prod; docker-compose -f "./docker-compose.prod.yml" down'
      - name: Build Prod changes
        run: ssh server 'cd /root/website/website_prod; docker-compose -f "./docker-compose.prod.yml" up -d'
      
      - name: Sleep for 1 minute
        uses: jakejarvis/wait-action@master
        with:
          time: '60s'
      
      
  http-test:
    name: HTTP Tests
    needs: [build-prod]
    if: github.actor == github.event.repository.owner.login
        
    runs-on: ubuntu-latest
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host server
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: grocock.email
      - name: Check http status code of Production site
        uses: lakuapik/gh-actions-http-status@v1
        with:
          sites: '["${{ env.prodURL }}"]'
          expected: '[200]'
  
  audit:
      runs-on: ubuntu-latest
      needs: [build-prod]
      
      steps:
      - name: Audit live URL
        uses: jakejarvis/lighthouse-action@master
        with:
          url: ${{ env.prodURL }}
      - name: Upload results as an artifact
        uses: actions/upload-artifact@master
        with:
          name: report
          path: './report'
